# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreateTenant(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, vmanageIp: str=None, vmanageUsername: str=None, vmanagePassword: str=None, port: str=None, tenantName: str=None):  # noqa: E501
        """OnboardRequest - a model defined in Swagger

        :param host_description: The host_description of this OnboardRequest.  # noqa: E501
        :type host_description: str
        :param switch_management_ip: The switch_management_ip of this OnboardRequest.  # noqa: E501
        :type switch_management_ip: str
        :param switch_port_id: The switch_port_id of this OnboardRequest.  # noqa: E501
        :type switch_port_id: str
        :param network_segment_id: The network_segment_id of this OnboardRequest.  # noqa: E501
        :type network_segment_id: int
        """
        self.swagger_types = {
            'vmanageIp': str,
            'vmanageUsername': str,
            'vmanagePassword': str,
            'port': str,
            'tenantName': str
        }

        self.attribute_map = {
            'vmanageIp': 'vmanageIp',
            'vmanageUsername': 'vmanageUsername',
            'vmanagePassword': 'vmanagePassword',
            'port': 'port',
            'tenantName': 'tenantName'
        }

        self._vmanageIp = vmanageIp
        self._vmanageUsername = vmanageUsername
        self._vmanagePassword = vmanagePassword
        self._port = port
        self._tenantName = tenantName

    @classmethod
    def from_dict(cls, dikt) -> 'CreateTenant':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OnboardRequest of this OnboardRequest.  # noqa: E501
        :rtype: OnboardRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vmanageIp(self) -> str:
        """Gets the host_description of this OnboardRequest.


        :return: The host_description of this OnboardRequest.
        :rtype: str
        """
        return self._vmanageIp

    @vmanageIp.setter
    def vmanageIp(self, vmanageIp: str):
        """Sets the host_description of this OnboardRequest.


        :param host_description: The host_description of this OnboardRequest.
        :type host_description: str
        """

        self._vmanageIp = vmanageIp

    @property
    def vmanageUsername(self) -> str:
        """Gets the switch_management_ip of this OnboardRequest.


        :return: The switch_management_ip of this OnboardRequest.
        :rtype: str
        """
        return self._vmanageUsername

    @vmanageUsername.setter
    def vmanageUsername(self, vmanageUsername: str):
        """Sets the switch_management_ip of this OnboardRequest.


        :param switch_management_ip: The switch_management_ip of this OnboardRequest.
        :type switch_management_ip: str
        """

        self._vmanageUsername = vmanageUsername

    @property
    def vmanagePassword(self) -> str:
        """Gets the switch_port_id of this OnboardRequest.


        :return: The switch_port_id of this OnboardRequest.
        :rtype: str
        """
        return self._vmanagePassword

    @vmanagePassword.setter
    def vmanagePassword(self, vmanagePassword: str):
        """Sets the switch_port_id of this OnboardRequest.


        :param switch_port_id: The switch_port_id of this OnboardRequest.
        :type switch_port_id: str
        """

        self._vmanagePassword = vmanagePassword

    @property
    def port(self) -> str:
        """Gets the network_segment_id of this OnboardRequest.


        :return: The network_segment_id of this OnboardRequest.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: str):
        """Sets the network_segment_id of this OnboardRequest.


        :param network_segment_id: The network_segment_id of this OnboardRequest.
        :type network_segment_id: int
        """

        self._port = port

    @property
    def tenantName(self) -> str:
        """Gets the network_segment_id of this OnboardRequest.


        :return: The network_segment_id of this OnboardRequest.
        :rtype: int
        """
        return self._tenantName

    @tenantName.setter
    def tenantName(self, tenantName: str):
        """Sets the network_segment_id of this OnboardRequest.


        :param network_segment_id: The network_segment_id of this OnboardRequest.
        :type network_segment_id: int
        """

        self._tenantName = tenantName
